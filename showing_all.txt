def overlayDisplay(input_img: torch.tensor, mask1: torch.tensor, mask2: torch.tensor) -> None:
    color1 = np.array([0,0,1]).astype(np.float32)
    color2 = np.array([1,0,0]).astype(np.float32)
    input_img_cpu = np.squeeze(input_img.clone().detach().cpu().numpy()).astype(np.float32)
    gray_img = np.stack((input_img_cpu, input_img_cpu, input_img_cpu), axis=2)
    mask1_cpu = np.squeeze(mask1.clone().detach().cpu().numpy()).astype(np.float32)
    mask2_cpu = np.squeeze(mask2.clone().detach().cpu().numpy()).astype(np.float32)
    mask1_cpu = np.where(mask1_cpu[...,None], color1, gray_img)
    mask2_cpu = np.where(mask2_cpu[...,None], color2, gray_img)
    out = cv2.addWeighted(mask1_cpu, 0.5, mask2_cpu, 0.5,0)
    out = cv2.addWeighted(gray_img, 0.2, out, 0.8,0)
    plt.imshow(out)